local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Screech - Arm Wrestle Simulator", HidePremium = false, SaveConfig = true, ConfigFolder = "ScreechHub", IntroText = "Screech Hub", IntroIcon = "rbxassetid://10851325055"})

OrionLib:MakeNotification({
    Name = "Screech Hub on top",
    Content = "We don't have 3 linkvertises to get a key LMAOOO",
    Image = "rbxassetid://10851325055",
    Time = 10
})

OrionLib:MakeNotification({
    Name = "Join the Discord",
    Content = "Join the Screech Hub Discord",
    Image = "rbxassetid://10851325055",
    Time = 10
})

local bagtable = {"None"}

local function getbagnumbers()
        for i, bags in pairs(game:GetService("Workspace").Zones["1"].Interactables.Training.PunchBags:GetChildren()) do
            table.insert(bagtable, bags.Name)
    end
end

getbagnumbers()

local zonetable = {"None"}

local function getzonenumbers()
        for i, zones in pairs(game:GetService("Workspace").Zones:GetChildren()) do
            table.insert(zonetable, zones.Name)
    end
end

getzonenumbers()

local w1npc = {"None"}

local function getnpcw1()
        for i, npc1 in pairs(game:GetService("Workspace").Zones["1"].Interactables.ArmWrestling.NPC:GetChildren()) do
            table.insert(w1npc, npc1.Name)
    end
end

getnpcw1()

local w2npc = {"None"}

local function getnpcw2()
        for i, npc2 in pairs(game:GetService("Workspace").Zones["2"].Interactables.ArmWrestling.NPC:GetChildren()) do
            table.insert(w2npc, npc2.Name)
    end
end

getnpcw2()

local w3npc = {"None"}

local function getnpcw3()
        for i, npc3 in pairs(game:GetService("Workspace").Zones["3"].Interactables.ArmWrestling.NPC:GetChildren()) do
            table.insert(w3npc, npc3.Name)
    end
end

getnpcw3()

local w4npc = {"None"}

local function getnpcw4()
        for i, npc4 in pairs(game:GetService("Workspace").Zones["4"].Interactables.ArmWrestling.NPC:GetChildren()) do
            table.insert(w4npc, npc4.Name)
    end
end

getnpcw4()

local Home = Window:MakeTab({
    Name = "Home",
    Icon = "rbxassetid://13151271769",
    PremiumOnly = false
})

local Farming = Window:MakeTab({
    Name = "Training",
    Icon = "rbxassetid://13638014822",
    PremiumOnly = false
})

local NPC = Window:MakeTab({
    Name = "NPC",
    Icon = "rbxassetid://13740079372",
    PremiumOnly = false
})

local Exploits = Window:MakeTab({
    Name = "Exploits",
    Icon = "rbxassetid://13804208410",
    PremiumOnly = false
})

local Event = Window:MakeTab({
    Name = "Event",
    Icon = "rbxassetid://13977902143",
    PremiumOnly = false
})

local Index = Window:MakeTab({
    Name = "Index",
    Icon = "rbxassetid://12757450277",
    PremiumOnly = false
})

local Season = Window:MakeTab({
    Name = "Season",
    Icon = "rbxassetid://13914216533",
    PremiumOnly = false
})

local Misc = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://12890941259",
    PremiumOnly = false
})

local UpdateLog = Home:AddSection({
    Name = "Home - Update Log"
})

local Stats = Farming:AddSection({
    Name = "Training - Stats"
})

local Train = Farming:AddSection({
    Name = "Training - Grips & Dumbells"
})

local Barbells = Farming:AddSection({
    Name = "Training - Barbells"
})

local Knuckles = Farming:AddSection({
    Name = "Training - Knuckles"
})

local NPCStats = NPC:AddSection({
    Name = "NPC - Stats"
})

local NPCFarm = NPC:AddSection({
    Name = "NPC - Autofarm"
})

local Exploit = Exploits:AddSection({
    Name = "Exploits - Multifarm"
})

local Exploit2 = Exploits:AddSection({
    Name = "Exploits - Train 1"
})

local Exploit3 = Exploits:AddSection({
    Name = "Exploits - Train 2"
})

local ExploitEnable = Exploits:AddSection({
    Name = "Exploits - Enable"
})

local PetStrengthDupe = Exploits:AddSection({
    Name = "Exploits - Dupe Pet Strength"
})

local EventEgg = Event:AddSection({
    Name = "Event - Event Auto Hatch"
})

local EventFarm = Event:AddSection({
    Name = "Event - Event Egg Farm"
})

local AutoSeason = Season:AddSection({
    Name = "Season - Auto Quest"
})

local SeasonRedeem = Season:AddSection({
    Name = "Season - Auto Redeem"
})

local MiscRedeem = Misc:AddSection({
    Name = "Misc - Auto Redeem"
})

local indexplaceholder = Index:AddSection({
    Name = "COMING SOON"
})


UpdateLog:AddParagraph("Update Log","✅ Script Released\n✅ Join the Discord\n✅ More being added VERY soon!")
UpdateLog:AddParagraph("Credits","Script made by 1oxin")

local eggeventamt = EventEgg:AddParagraph("Egg Amount", game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Menus.Event.Amount.Text)

UpdateLog:AddButton({
    Name = "Copy Discord Invite",
    Callback = function()
        setclipboard("https://discord.gg/Ry56XfGncK")
    end
})

local Statistics = Stats:AddParagraph("Statistics","Wins: "..game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Rebirths.Amount.Text.."\nBicep Power: "..game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Bicep.Amount.Text.."\nHand Power: "..game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Hand.Amount.Text.."\nKnuckle Power: "..game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Speed.Amount.Text)
local NPCStat = NPCStats:AddParagraph("Statistics", "Wins: "..game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Rebirths.Amount.Text)

local function updateStats(Stats)
    local rebirths = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Rebirths.Amount.Text
    local bicepPower = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Bicep.Amount.Text
    local handPower = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Hand.Amount.Text
    local knucklePower = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Currency.Speed.Amount.Text

    eggeventamt:Set(game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Menus.Event.Amount.Text)
    NPCStat:Set("Wins: "..rebirths)
    Statistics:Set("Wins: "..rebirths.."\nBicep Power: "..bicepPower.."\nHand Power: "..handPower.."\nKnuckle Power: "..knucklePower)
end

Train:AddDropdown({
    Name = "Select Train Type",
    Default = "None",
    Options = {"None", "Dumbells", "Grips"},
    Callback = function(Value)
        _G.traintype = Value
    end
})

local function GetKgNumbers()
    local options = {"None"}
    local kgnumsTable = {}

    for i, kgnums in pairs(game:GetService("ReplicatedStorage").Tools.Dumbells:GetChildren()) do
        table.insert(kgnumsTable, kgnums.Name)
    end

    for i, kgnums2 in pairs(game:GetService("ReplicatedStorage").Tools.Grips:GetChildren()) do
        table.insert(kgnumsTable, kgnums2.Name)
    end

    table.sort(kgnumsTable, function(a, b)
        return tonumber(a:sub(1, -3)) < tonumber(b:sub(1, -3))
    end)

    for _, kgnums in ipairs(kgnumsTable) do
        if not table.find(options, kgnums) then
            table.insert(options, kgnums)
        end
    end

    _G.KGNumber = options

    Train:AddDropdown({
        Name = "Select KG",
        Default = "None",
        Options = options,
        Callback = function(Value)
            _G.KG = Value
        end
    })
end

GetKgNumbers()

Train:AddButton({
    Name = "Equip Selected",
    Callback = function()
        local worldNumber
        local kgValue = _G.KG
        local numericValue = tonumber(kgValue:match("%d+"))

        if numericValue then
            if numericValue >= 1 and numericValue <= 250 then
                worldNumber = 1
            elseif numericValue >= 300 and numericValue <= 4000 then
                worldNumber = 2
            elseif numericValue >= 5000 and numericValue <= 45000 then
                worldNumber = 3
            elseif numericValue >= 50000 and numericValue <= 300000 then
                worldNumber = 4
            else
			
            end
        end

        if worldNumber then
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(worldNumber, _G.traintype, _G.KG)
        else
            print("Failed to detect world number for the given KG value")
        end
    end
})

Train:AddToggle({
	Name = "Autoclick",
	Default = false,
	Callback = function(Value)
    _G.click = Value
        while _G.click == true do
            wait()
		    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ToolService.RE.onClick:FireServer()
        end
	end    
})

Barbells:AddDropdown({
	Name = "Select Barbell",
	Default = "None",
	Options = {"None", "Tier1", "Tier2", "Tier3", "Tier4", "Tier5", "Tier6", "Tier7", "Tier8", "Tier9", "Tier10", "Tier11", "Tier12"},
	Callback = function(Value)
		_G.SelectedBarbell = Value
	end    
})

Barbells:AddButton({
    Name = "Equip Barbell",
    Callback = function()
        local selectedBarbell = _G.SelectedBarbell
        local barbellworld
        
        if selectedBarbell then
            if selectedBarbell == "Tier1" or selectedBarbell == "Tier2" or selectedBarbell == "Tier3" then
                barbellworld = 1
            elseif selectedBarbell == "Tier4" or selectedBarbell == "Tier5" or selectedBarbell == "Tier6" then
                barbellworld = 2
            elseif selectedBarbell == "Tier7" or selectedBarbell == "Tier8" or selectedBarbell == "Tier9" then
                barbellworld = 3
            elseif selectedBarbell == "Tier10" or selectedBarbell == "Tier11" or selectedBarbell == "Tier12" then
                barbellworld = 4
            else
                print("Invalid barbell selection")
                return
            end
            
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ToolService.RE.onEquipRequest:FireServer(barbellworld, "Barbells", selectedBarbell)
        else
            print("No barbell selected")
        end
    end
})


Barbells:AddToggle({
	Name = "Autoclick",
	Default = false,
	Callback = function(Value)
    _G.barbellclick = Value
        while _G.barbellclick == true do
            wait()
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ToolService.RE.onClick:FireServer()
        end
	end    
})

local knuckledrop = Knuckles:AddDropdown({
    Name = "Select Bag",
    Default = bagtable[1],
    Options = bagtable,
    Callback = function(Value)
        _G.SelectedBag = Value
    end
})

Knuckles:AddDropdown({
    Name = "Select Zone",
    Default = zonetable[1],
    Options = zonetable,
    Callback = function(Value)
        _G.SelectedZone = Value
    end
})

Knuckles:AddToggle({
	Name = "Autoclick",
	Default = false,
	Callback = function(Value)
		_G.bagclick = Value
        while _G.bagclick do
            wait()
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.PunchBagService.RE.onGiveStats:FireServer(_G.SelectedZone, _G.SelectedBag, true)
        end
	end    
})

NPCFarm:AddDropdown({
	Name = "World 1 NPCS",
	Default = w1npc[1],
	Options = w1npc,
	Callback = function(Value)
		_G.NPCSelected = Value
	end    
})

NPCFarm:AddDropdown({
	Name = "World 2 NPCS",
	Default = w2npc[1],
	Options = w2npc,
	Callback = function(Value)
		_G.NPCSelected = Value
	end    
})

NPCFarm:AddDropdown({
	Name = "World 3 NPCS",
	Default = w3npc[1],
	Options = w3npc,
	Callback = function(Value)
		_G.NPCSelected = Value
	end    
})

NPCFarm:AddDropdown({
	Name = "World 4 NPCS",
	Default = w4npc[1],
	Options = w4npc,
	Callback = function(Value)
		_G.NPCSelected = Value
	end    
})

NPCFarm:AddDropdown({
    Name = "Select Zone",
    Default = zonetable[1],
    Options = zonetable,
    Callback = function(Value)
        _G.NPCSelectedZone = Value
    end
})

NPCFarm:AddSlider({
	Name = "NPC Farm Delay",
	Min = 0,
	Max = 60,
	Default = 0,
	Color = Color3.fromRGB(0,150,200),
	Increment = 1,
	ValueName = "NPCDelay",
	Callback = function(Value)
		_G.NPCDelay = Value
	end    
})

NPCFarm:AddToggle({
	Name = "Autofarm NPC",
	Default = false,
	Callback = function(Value)
    _G.AFNPC = Value
        while _G.AFNPC == true do
            wait()
		    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(_G.NPCSelected, workspace.Zones[_G.NPCSelectedZone].Interactables.ArmWrestling.NPC[_G.NPCSelected], _G.NPCSelectedZone)
        end
	end    
})

NPCFarm:AddToggle({
	Name = "NPC Autoclick",
	Default = false,
	Callback = function(Value)
    _G.AFClick = Value
        while _G.AFClick == true do
            wait()
		    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
        end
	end    
})

Exploit:AddParagraph("How to use","1. Select Dumbells, Grips, or Barbells\n2. Select a bag for knuckles\n\nNote:\nTriple farm isn't really possible lmao, Cloudy claims that his triple farm works and is faster than double and normal farming but it isn't, its the same speed as double farm because hand and bicep cooldowns are the same/you cant use them when one is on cooldown")

Exploit2:AddDropdown({
    Name = "Train Type 1",
    Default = "None",
    Options = {"None", "Dumbells", "Grips", "Barbells"},
    Callback = function(Value)
        _G.traintype2 = Value
    end
})

Exploit2:AddDropdown({
	Name = "Select Barbell",
	Default = "None",
	Options = {"None", "Tier1", "Tier2", "Tier3", "Tier4", "Tier5", "Tier6", "Tier7", "Tier8", "Tier9", "Tier10", "Tier11", "Tier12"},
	Callback = function(Value)
		_G.TBarBellSelected = Value
	end    
})

Exploit2:AddDropdown({
	Name = "Select KG",
	Default = _G.KGNumber[1],
	Options = _G.KGNumber,
	Callback = function(Value)
		_G.KGSelected1 = Value
	end    
})

Exploit3:AddDropdown({
    Name = "Select Bag",
    Default = bagtable[1],
    Options = bagtable,
    Callback = function(Value)
        _G.SelectedBag2 = Value
    end
})

Exploit3:AddDropdown({
    Name = "Select Zone",
    Default = zonetable[1],
    Options = zonetable,
    Callback = function(Value)
        _G.SelectedZone2 = Value
    end
})


ExploitEnable:AddToggle({
    Name = "Enable Multifarm",
    Default = false,
    Callback = function(Value)
        _G.multifarm = Value
        while _G.multifarm do
            wait()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local knitServices = ReplicatedStorage.Packages._Index["sleitnick_knit@1.4.7"].knit.Services

            local toolService = knitServices.ToolService.RE
            local punchBagService = knitServices.PunchBagService.RE

            local traintype, weight, kgValue, numericValue, level

            if _G.traintype2 == "Dumbells" or _G.traintype2 == "Grips" then
                traintype = _G.traintype2
                weight = _G.KGSelected1
                kgValue = weight
                numericValue = tonumber(kgValue:match("%d+"))
                level = numericValue < 251 and "1" or numericValue < 4001 and "2" or numericValue < 45001 and "3" or "4"
                toolService.onGuiEquipRequest:FireServer(level, traintype, weight)
            elseif _G.traintype2 == "Barbells" then
                traintype = "Barbells"
                weight = _G.TBarBellSelected
                kgValue = weight
                numericValue = tonumber(kgValue:match("%d+"))
                level = numericValue <= 3 and "1" or numericValue <= 6 and "2" or numericValue <= 9 and "3" or "4"
                toolService.onEquipRequest:FireServer(level, traintype, weight)
            end

            toolService.onClick:FireServer()
            punchBagService.onGiveStats:FireServer(_G.SelectedZone2, _G.SelectedBag2, true)
        end
    end    
})

EventEgg:AddToggle({
	Name = "Auto Hatch",
	Default = false,
	Callback = function(Value)
	_G.EventHatchToggle = Value
		while _G.EventHatchToggle do
            wait()
			game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.EventService.RF.ClaimEgg:InvokeServer()
        end
	end    
})

EventEgg:AddToggle({
	Name = "3x Auto Hatch",
	Default = false,
	Callback = function(Value)
	_G.EventHatchToggle3 = Value
		while _G.EventHatchToggle3 do
            wait()
			game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.EventService.RF.ClaimEgg:InvokeServer(3)
        end
	end    
})

EventEgg:AddToggle({
	Name = "8x Auto Hatch",
	Default = false,
	Callback = function(Value)
	_G.EventHatchToggle8 = Value
		while _G.EventHatchToggle8 do
            wait()
			game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.EventService.RF.ClaimEgg:InvokeServer(8)
        end
	end    
})

EventFarm:AddSlider({
	Name = "Delay",
	Min = 0,
	Max = 60,
	Default = 0,
	Color = Color3.fromRGB(0,150,200),
	Increment = 0.01,
	ValueName = "Seconds",
	Callback = function(Value)
		_G.EventDelay = Value
	end    
})

EventFarm:AddToggle({
	Name = "Ripper Doc",
	Default = false,
	Callback = function(Value)
    _G.world2 = Value
        while _G.world2 do
            wait(_G.EventDelay)
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer("RipperDoc", workspace.Zones["2"].Interactables.ArmWrestling.NPC.RipperDoc, "2")
        end
	end    
})

EventFarm:AddDropdown({
	Name = "Select Boss",
	Default = w3npc[1],
	Options = w3npc,
	Callback = function(Value)
		_G.EventNPCSelected = Value
	end    
})

EventFarm:AddToggle({
	Name = "World 3",
	Default = false,
	Callback = function(Value)
    _G.world3 = Value
        while _G.world3 do
            wait(_G.EventDelay)
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(_G.EventNPCSelected, workspace.Zones["3"].Interactables.ArmWrestling.NPC[_G.EventNPCSelected], "3")
        end
	end    
})

EventFarm:AddToggle({
	Name = "NPC Autoclick",
	Default = false,
	Callback = function(Value)
    _G.EventClick = Value
        while _G.EventClick do
            wait()
		    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
        end
	end    
})

AutoSeason:AddToggle({
    Name = "Open Eggs Quest",
    Default = false,
    Callback = function(Value)
        _G.SeasonEgg = Value
        while _G.SeasonEgg do
            wait()
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.EggService.RF.purchaseEgg:InvokeServer("Earth")
            for i, pets in pairs(game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Menus.PetInventory.Container.ScrollingFrame.Pets:GetChildren()) do
                for i, id in pairs(pets:GetChildren()) do
                    if id.ClassName == "TextButton" then
                        for i, petname in pairs(id:GetChildren()) do
                            if petname.ClassName == "TextLabel" then
                                if petname.Text == "Cat" or petname.Text == "Dog" or petname.Text == "Cow" or petname.Text == "Mouse" then
                                    local petid = petname.Parent.Parent.Name
                                    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.PetService.RF.delete:InvokeServer(petid)
                                end
                            end
                        end
                    end
                end
            end
        end
    end    
})

AutoSeason:AddToggle({
    Name = "Auto Craft Quest",
    Default = false,
    Callback = function(Value)
        _G.QuestCraft = Value
        while _G.QuestCraft do
            wait()
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.EggService.RF.purchaseEgg:InvokeServer("Earth")
            for i, petscraft in pairs(game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Menus.PetInventory.Container.ScrollingFrame.Pets:GetChildren()) do
                for i, idcraft in pairs(petscraft:GetChildren()) do
                    if idcraft.ClassName == "TextButton" then
                        for i, petnamecraft in pairs(idcraft:GetChildren()) do
                            if petnamecraft.ClassName == "TextLabel" then
                                if petnamecraft.Text == "Cat" or petnamecraft.Text == "Dog" or petnamecraft.Text == "Cow" or petnamecraft.Text == "Mouse" then
                                    local petidcraft = petnamecraft.Parent.Parent.Name
                                    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.PetService.RF.craft:InvokeServer(petidcraft)
                                end
                            end
                        end
                    end
                end
            end
        end
    end    
})

AutoSeason:AddToggle({
	Name = "Auto Bicep Quest",
	Default = false,
	Callback = function(Value)
    _G.QBicep = Value
        while _G.QBicep do
		    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(1, "Dumbells", "1Kg")
            wait()
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ToolService.RE.onClick:FireServer()
        end
	end    
})

AutoSeason:AddToggle({
	Name = "Auto Grip Quest",
	Default = false,
	Callback = function(Value)
    _G.QBicep = Value
        while _G.QBicep do
		    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(1, "Grips", "1Kg")
            wait()
            game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.ToolService.RE.onClick:FireServer()
        end
	end    
})

MiscRedeem:AddToggle({
	Name = "Auto Spin Wheel",
	Default = false,
	Callback = function(Value)
    _G.AutoSpin = Value
        while _G.AutoSpin do
            wait()
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.4.7"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("SpinService"):WaitForChild("RE"):WaitForChild("onSpinRequest"):FireServer()
        end
	end    
})

MiscRedeem:AddToggle({
	Name = "Auto Redeem Gifts",
	Default = false,
	Callback = function(Value)
    _G.AutoSpin = Value
        while _G.AutoSpin do
            for i = 1,12 do
            local args = {
                [1] = i
            }
                
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.4.7"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer(unpack(args))                
			task.wait(0.5)
            end
        end
	end    
})

PetStrengthDupe:AddTextbox({
	Name = "Pet Name (Case Sensitive)",
	Default = "",
	TextDisappear = false,
	Callback = function(name)
		petName = name
	end	  
})
PetStrengthDupe:AddDropdown({
	Name = "Rarity",
	Default = "None",
	Options = {"None", "Gold", "Void"},
	Callback = function(rare)
		rarity = rare
	end    
})

PetStrengthDupe:AddDropdown({
	Name = "Pet Size",
	Default = "None",
	Options = {"None", "Big", "Huge"},
	Callback = function(size)
		petSize = size
	end    
})

PetStrengthDupe:AddButton({
	Name = "Start!",
	Callback = function()
      	bugCode()
  	end    
})

function bugCode()
    local petColor = {Gold = Color3.fromRGB(255, 215, 0), Void = Color3.fromRGB(150, 44, 255)}
    local inputColor = petColor[rarity]

    for _, pets in pairs(game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Menus.PetInventory.Container.ScrollingFrame.Pets:GetDescendants()) do
        if pets:IsA("Frame") then
            local args = {
                [1] = pets.Name
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.4.7"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("PetService"):WaitForChild("RF"):WaitForChild("unequip"):InvokeServer(unpack(args))
        end
    end

    for _, pets in pairs(game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Menus.PetInventory.Container.ScrollingFrame.Pets:GetDescendants()) do
        if pets:IsA("TextLabel") then
            local imageLabel = nil
            if petSize ~= "None" then
                imageLabel = pets.Parent:FindFirstChild(petSize)
            end
            if rarity ~= "None" and inputColor and string.find(pets.Text, petName) and pets.TextColor3 == inputColor and imageLabel and imageLabel.Visible == true then
                for i = 1,32 do
                    local args = {
                        [1] = pets.Parent.Parent.Name
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.4.7"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("PetService"):WaitForChild("RF"):WaitForChild("equip"):InvokeServer(unpack(args)) 
                end
            elseif (rarity == "None" or petSize == "None") and string.find(pets.Text, petName) then
                for i = 1,32 do
                    local args = {
                        [1] = pets.Parent.Parent.Name
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.4.7"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("PetService"):WaitForChild("RF"):WaitForChild("equip"):InvokeServer(unpack(args)) 
                end
            end
        end
    end
end

while true do
    wait()
    updateStats(Statistics)
end
